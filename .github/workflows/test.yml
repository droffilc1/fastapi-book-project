name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-book-project:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-book-project:${{ github.sha }}

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy via SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-book-project
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Deploy via SSH
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << 'EOF'
            echo "ðŸ”¹ Checking if Docker is running..."
            sudo systemctl restart docker
            sleep 3
            
            echo "ðŸ”¹ Pulling latest Docker image..."
            docker pull ${DOCKER_IMAGE}:${{ github.sha }}

            echo "ðŸ”¹ Restarting Docker Compose services..."
            cd /home/ubuntu/fastapi-book-project
            docker-compose down
            docker-compose up -d --force-recreate
            
            echo "ðŸ”¹ Cleaning up old images..."
            docker image prune -af

            echo "âœ… Deployment successful!"
          EOF
